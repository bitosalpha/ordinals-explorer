{"ast":null,"code":"var _jsxFileName = \"C:\\\\unisat-dev-support\\\\brc20-market-demo\\\\src\\\\provider\\\\UniSatProvider.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useCallback, useContext, useEffect, useState } from \"react\";\nimport { handleError, sleep } from \"../utils/utils\";\nimport { unisatUtils } from \"../utils/unisatUtils\";\nimport { useNetwork } from \"./NetworkProvider\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UnisatContext = /*#__PURE__*/createContext({\n  isInstalled: false,\n  isConnected: false,\n  address: '',\n  pubkey: '',\n  connect: () => {},\n  signMessage: msg => Promise.resolve(''),\n  signPsbt: psbt => Promise.resolve('')\n});\nexport function useUnisat() {\n  _s();\n  const context = useContext(UnisatContext);\n  if (!context) {\n    throw Error('Feature flag hooks can only be used by children of UnisatProvider.');\n  } else {\n    return context;\n  }\n}\n_s(useUnisat, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default function UnisatProvider({\n  children\n}) {\n  _s2();\n  const {\n    network\n  } = useNetwork();\n  const [isInstalled, setIsInstalled] = useState(false);\n  const [isConnected, setIsConnected] = useState(false);\n  const [address, setAddress] = useState('');\n  const [pubkey, setPubkey] = useState('');\n  useEffect(() => {\n    async function init() {\n      let install = !!window.unisat;\n      setIsInstalled(install);\n\n      // 额外检查\n      for (let i = 0; i < 10 && !install; i += 1) {\n        await sleep(100 + i * 100);\n        install = !!window.unisat;\n        if (install) {\n          setIsInstalled(install);\n          break;\n        }\n      }\n      if (install) {\n        const address = await unisatUtils.getAccounts();\n        if (address) {\n          setPubkey(await unisatUtils.getPublicKey());\n          //     connected\n          setIsConnected(true);\n          setAddress(address);\n        }\n      }\n    }\n    init().then().catch(handleError);\n  }, []);\n  const connect = useCallback(async () => {\n    try {\n      await unisatUtils.checkNetwork(network);\n      const address = await unisatUtils.requestAccounts();\n      if (address) {\n        setPubkey(await unisatUtils.getPublicKey());\n        setIsConnected(true);\n        setAddress(address);\n      }\n    } catch (e) {\n      handleError(e);\n    }\n  }, [network]);\n  useEffect(() => {\n    async function onAppNetworkChange() {\n      try {\n        await unisatUtils.checkNetwork(network);\n        const address = await unisatUtils.getAccounts();\n        if (address) {\n          setAddress(address);\n        }\n      } catch (e) {\n        handleError(e);\n      }\n    }\n    if (isConnected) {\n      onAppNetworkChange().then();\n    }\n  }, [isConnected, network]);\n  const signMessage = useCallback(msg => {\n    return unisatUtils.signMessage(msg, 'bip322-simple');\n  }, []);\n  const signPsbt = useCallback(psbt => {\n    return unisatUtils.signPsbt(psbt);\n  }, []);\n  const value = {\n    isInstalled,\n    isConnected,\n    address,\n    pubkey,\n    connect,\n    signMessage,\n    signPsbt\n  };\n  return /*#__PURE__*/_jsxDEV(UnisatContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 12\n  }, this);\n}\n_s2(UnisatProvider, \"zlAeLzT5WhZqmiJ7a8+fkMpmfpA=\", false, function () {\n  return [useNetwork];\n});\n_c = UnisatProvider;\nvar _c;\n$RefreshReg$(_c, \"UnisatProvider\");","map":{"version":3,"names":["createContext","useCallback","useContext","useEffect","useState","handleError","sleep","unisatUtils","useNetwork","jsxDEV","_jsxDEV","UnisatContext","isInstalled","isConnected","address","pubkey","connect","signMessage","msg","Promise","resolve","signPsbt","psbt","useUnisat","_s","context","Error","UnisatProvider","children","_s2","network","setIsInstalled","setIsConnected","setAddress","setPubkey","init","install","window","unisat","i","getAccounts","getPublicKey","then","catch","checkNetwork","requestAccounts","e","onAppNetworkChange","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/unisat-dev-support/brc20-market-demo/src/provider/UniSatProvider.tsx"],"sourcesContent":["import {createContext, ReactNode, useCallback, useContext, useEffect, useState} from \"react\";\r\nimport {handleError, sleep} from \"../utils/utils\";\r\nimport {unisatUtils} from \"../utils/unisatUtils\";\r\nimport {useNetwork} from \"./NetworkProvider\";\r\n\r\ninterface UnisatContextType {\r\n    isInstalled: boolean;\r\n    isConnected: boolean;\r\n    address: string;\r\n    pubkey: string;\r\n    connect: () => void;\r\n    signMessage: (msg: string) => Promise<string>;\r\n    signPsbt: (psbt: string) => Promise<string>;\r\n}\r\n\r\nconst UnisatContext = createContext<UnisatContextType>({\r\n    isInstalled: false,\r\n    isConnected: false,\r\n    address: '',\r\n    pubkey: '',\r\n    connect: () => {\r\n    },\r\n    signMessage: (msg: string) => Promise.resolve(''),\r\n    signPsbt: (psbt: string) => Promise.resolve('')\r\n})\r\n\r\n\r\nexport function useUnisat() {\r\n    const context = useContext(UnisatContext);\r\n    if (!context) {\r\n        throw Error('Feature flag hooks can only be used by children of UnisatProvider.');\r\n    } else {\r\n        return context;\r\n    }\r\n}\r\n\r\nexport default function UnisatProvider({children}: {\r\n    children: ReactNode\r\n}) {\r\n    const {network} = useNetwork();\r\n    const [isInstalled, setIsInstalled] = useState(false)\r\n    const [isConnected, setIsConnected] = useState(false)\r\n    const [address, setAddress] = useState('')\r\n    const [pubkey, setPubkey] = useState('')\r\n\r\n    useEffect(() => {\r\n\r\n        async function init() {\r\n            let install = !!window.unisat;\r\n            setIsInstalled(install);\r\n\r\n            // 额外检查\r\n            for (let i = 0; i < 10 && !install; i += 1) {\r\n                await sleep(100 + i * 100);\r\n                install = !!window.unisat;\r\n                if (install) {\r\n                    setIsInstalled(install);\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (install) {\r\n                const address = await unisatUtils.getAccounts()\r\n                if (address) {\r\n                    setPubkey(await unisatUtils.getPublicKey())\r\n                    //     connected\r\n                    setIsConnected(true)\r\n                    setAddress(address)\r\n                }\r\n            }\r\n        }\r\n\r\n        init().then().catch(handleError);\r\n\r\n    }, []);\r\n\r\n    const connect = useCallback(async () => {\r\n        try {\r\n            await unisatUtils.checkNetwork(network);\r\n            const address = await unisatUtils.requestAccounts();\r\n            if (address) {\r\n                setPubkey(await unisatUtils.getPublicKey())\r\n                setIsConnected(true)\r\n                setAddress(address)\r\n            }\r\n        } catch (e) {\r\n            handleError(e)\r\n        }\r\n\r\n    }, [network])\r\n\r\n    useEffect(() => {\r\n        async function onAppNetworkChange() {\r\n            try {\r\n                await unisatUtils.checkNetwork(network);\r\n                const address = await unisatUtils.getAccounts()\r\n                if (address) {\r\n                    setAddress(address)\r\n                }\r\n            } catch (e) {\r\n                handleError(e)\r\n            }\r\n        }\r\n\r\n        if (isConnected) {\r\n            onAppNetworkChange().then()\r\n        }\r\n    }, [isConnected, network]);\r\n\r\n    const signMessage = useCallback((msg: string) => {\r\n        return unisatUtils.signMessage(msg, 'bip322-simple')\r\n    }, [])\r\n\r\n    const signPsbt = useCallback((psbt: string) => {\r\n        return unisatUtils.signPsbt(psbt)\r\n    }, []);\r\n\r\n    const value = {\r\n        isInstalled,\r\n        isConnected,\r\n        address,\r\n        pubkey,\r\n        connect,\r\n        signMessage,\r\n        signPsbt,\r\n    }\r\n\r\n    return <UnisatContext.Provider value={value}>\r\n        {children}\r\n    </UnisatContext.Provider>\r\n\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}